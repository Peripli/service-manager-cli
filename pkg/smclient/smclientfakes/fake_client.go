// Code generated by counterfeiter. DO NOT EDIT.
package smclientfakes

import (
	"io"
	"net/http"
	"sync"

	"github.com/Peripli/service-manager-cli/pkg/query"
	"github.com/Peripli/service-manager-cli/pkg/smclient"
	"github.com/Peripli/service-manager-cli/pkg/types"
)

type FakeClient struct {
	CallStub        func(string, string, io.Reader) (*http.Response, error)
	callMutex       sync.RWMutex
	callArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}
	callReturns struct {
		result1 *http.Response
		result2 error
	}
	callReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	DeleteBrokerStub        func(string) error
	deleteBrokerMutex       sync.RWMutex
	deleteBrokerArgsForCall []struct {
		arg1 string
	}
	deleteBrokerReturns struct {
		result1 error
	}
	deleteBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBrokersByFieldQueryStub        func(string) error
	deleteBrokersByFieldQueryMutex       sync.RWMutex
	deleteBrokersByFieldQueryArgsForCall []struct {
		arg1 string
	}
	deleteBrokersByFieldQueryReturns struct {
		result1 error
	}
	deleteBrokersByFieldQueryReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePlatformStub        func(string) error
	deletePlatformMutex       sync.RWMutex
	deletePlatformArgsForCall []struct {
		arg1 string
	}
	deletePlatformReturns struct {
		result1 error
	}
	deletePlatformReturnsOnCall map[int]struct {
		result1 error
	}
	DeletePlatformsByFieldQueryStub        func(string) error
	deletePlatformsByFieldQueryMutex       sync.RWMutex
	deletePlatformsByFieldQueryArgsForCall []struct {
		arg1 string
	}
	deletePlatformsByFieldQueryReturns struct {
		result1 error
	}
	deletePlatformsByFieldQueryReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteVisibilityStub        func(string) error
	deleteVisibilityMutex       sync.RWMutex
	deleteVisibilityArgsForCall []struct {
		arg1 string
	}
	deleteVisibilityReturns struct {
		result1 error
	}
	deleteVisibilityReturnsOnCall map[int]struct {
		result1 error
	}
	GetInfoStub        func(*query.Parameters) (*types.Info, error)
	getInfoMutex       sync.RWMutex
	getInfoArgsForCall []struct {
		arg1 *query.Parameters
	}
	getInfoReturns struct {
		result1 *types.Info
		result2 error
	}
	getInfoReturnsOnCall map[int]struct {
		result1 *types.Info
		result2 error
	}
	LabelStub        func(string, string, *types.LabelChanges) error
	labelMutex       sync.RWMutex
	labelArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *types.LabelChanges
	}
	labelReturns struct {
		result1 error
	}
	labelReturnsOnCall map[int]struct {
		result1 error
	}
	ListBrokersStub        func(*query.Parameters) (*types.Brokers, error)
	listBrokersMutex       sync.RWMutex
	listBrokersArgsForCall []struct {
		arg1 *query.Parameters
	}
	listBrokersReturns struct {
		result1 *types.Brokers
		result2 error
	}
	listBrokersReturnsOnCall map[int]struct {
		result1 *types.Brokers
		result2 error
	}
	ListOfferingsStub        func(*query.Parameters) (*types.ServiceOfferings, error)
	listOfferingsMutex       sync.RWMutex
	listOfferingsArgsForCall []struct {
		arg1 *query.Parameters
	}
	listOfferingsReturns struct {
		result1 *types.ServiceOfferings
		result2 error
	}
	listOfferingsReturnsOnCall map[int]struct {
		result1 *types.ServiceOfferings
		result2 error
	}
	ListPlansStub        func(*query.Parameters) (*types.ServicePlans, error)
	listPlansMutex       sync.RWMutex
	listPlansArgsForCall []struct {
		arg1 *query.Parameters
	}
	listPlansReturns struct {
		result1 *types.ServicePlans
		result2 error
	}
	listPlansReturnsOnCall map[int]struct {
		result1 *types.ServicePlans
		result2 error
	}
	ListPlatformsStub        func(*query.Parameters) (*types.Platforms, error)
	listPlatformsMutex       sync.RWMutex
	listPlatformsArgsForCall []struct {
		arg1 *query.Parameters
	}
	listPlatformsReturns struct {
		result1 *types.Platforms
		result2 error
	}
	listPlatformsReturnsOnCall map[int]struct {
		result1 *types.Platforms
		result2 error
	}
	ListVisibilitiesStub        func(*query.Parameters) (*types.Visibilities, error)
	listVisibilitiesMutex       sync.RWMutex
	listVisibilitiesArgsForCall []struct {
		arg1 *query.Parameters
	}
	listVisibilitiesReturns struct {
		result1 *types.Visibilities
		result2 error
	}
	listVisibilitiesReturnsOnCall map[int]struct {
		result1 *types.Visibilities
		result2 error
	}
	MarketplaceStub        func(*query.Parameters) (*types.Marketplace, error)
	marketplaceMutex       sync.RWMutex
	marketplaceArgsForCall []struct {
		arg1 *query.Parameters
	}
	marketplaceReturns struct {
		result1 *types.Marketplace
		result2 error
	}
	marketplaceReturnsOnCall map[int]struct {
		result1 *types.Marketplace
		result2 error
	}
	RegisterBrokerStub        func(*types.Broker) (*types.Broker, error)
	registerBrokerMutex       sync.RWMutex
	registerBrokerArgsForCall []struct {
		arg1 *types.Broker
	}
	registerBrokerReturns struct {
		result1 *types.Broker
		result2 error
	}
	registerBrokerReturnsOnCall map[int]struct {
		result1 *types.Broker
		result2 error
	}
	RegisterPlatformStub        func(*types.Platform) (*types.Platform, error)
	registerPlatformMutex       sync.RWMutex
	registerPlatformArgsForCall []struct {
		arg1 *types.Platform
	}
	registerPlatformReturns struct {
		result1 *types.Platform
		result2 error
	}
	registerPlatformReturnsOnCall map[int]struct {
		result1 *types.Platform
		result2 error
	}
	RegisterVisibilityStub        func(*types.Visibility) (*types.Visibility, error)
	registerVisibilityMutex       sync.RWMutex
	registerVisibilityArgsForCall []struct {
		arg1 *types.Visibility
	}
	registerVisibilityReturns struct {
		result1 *types.Visibility
		result2 error
	}
	registerVisibilityReturnsOnCall map[int]struct {
		result1 *types.Visibility
		result2 error
	}
	UpdateBrokerStub        func(string, *types.Broker) (*types.Broker, error)
	updateBrokerMutex       sync.RWMutex
	updateBrokerArgsForCall []struct {
		arg1 string
		arg2 *types.Broker
	}
	updateBrokerReturns struct {
		result1 *types.Broker
		result2 error
	}
	updateBrokerReturnsOnCall map[int]struct {
		result1 *types.Broker
		result2 error
	}
	UpdatePlatformStub        func(string, *types.Platform) (*types.Platform, error)
	updatePlatformMutex       sync.RWMutex
	updatePlatformArgsForCall []struct {
		arg1 string
		arg2 *types.Platform
	}
	updatePlatformReturns struct {
		result1 *types.Platform
		result2 error
	}
	updatePlatformReturnsOnCall map[int]struct {
		result1 *types.Platform
		result2 error
	}
	UpdateVisibilityStub        func(string, *types.Visibility) (*types.Visibility, error)
	updateVisibilityMutex       sync.RWMutex
	updateVisibilityArgsForCall []struct {
		arg1 string
		arg2 *types.Visibility
	}
	updateVisibilityReturns struct {
		result1 *types.Visibility
		result2 error
	}
	updateVisibilityReturnsOnCall map[int]struct {
		result1 *types.Visibility
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Call(arg1 string, arg2 string, arg3 io.Reader) (*http.Response, error) {
	fake.callMutex.Lock()
	ret, specificReturn := fake.callReturnsOnCall[len(fake.callArgsForCall)]
	fake.callArgsForCall = append(fake.callArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}{arg1, arg2, arg3})
	fake.recordInvocation("Call", []interface{}{arg1, arg2, arg3})
	fake.callMutex.Unlock()
	if fake.CallStub != nil {
		return fake.CallStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.callReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CallCallCount() int {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	return len(fake.callArgsForCall)
}

func (fake *FakeClient) CallCalls(stub func(string, string, io.Reader) (*http.Response, error)) {
	fake.callMutex.Lock()
	defer fake.callMutex.Unlock()
	fake.CallStub = stub
}

func (fake *FakeClient) CallArgsForCall(i int) (string, string, io.Reader) {
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	argsForCall := fake.callArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CallReturns(result1 *http.Response, result2 error) {
	fake.callMutex.Lock()
	defer fake.callMutex.Unlock()
	fake.CallStub = nil
	fake.callReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CallReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.callMutex.Lock()
	defer fake.callMutex.Unlock()
	fake.CallStub = nil
	if fake.callReturnsOnCall == nil {
		fake.callReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.callReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteBroker(arg1 string) error {
	fake.deleteBrokerMutex.Lock()
	ret, specificReturn := fake.deleteBrokerReturnsOnCall[len(fake.deleteBrokerArgsForCall)]
	fake.deleteBrokerArgsForCall = append(fake.deleteBrokerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteBroker", []interface{}{arg1})
	fake.deleteBrokerMutex.Unlock()
	if fake.DeleteBrokerStub != nil {
		return fake.DeleteBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteBrokerCallCount() int {
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	return len(fake.deleteBrokerArgsForCall)
}

func (fake *FakeClient) DeleteBrokerCalls(stub func(string) error) {
	fake.deleteBrokerMutex.Lock()
	defer fake.deleteBrokerMutex.Unlock()
	fake.DeleteBrokerStub = stub
}

func (fake *FakeClient) DeleteBrokerArgsForCall(i int) string {
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	argsForCall := fake.deleteBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteBrokerReturns(result1 error) {
	fake.deleteBrokerMutex.Lock()
	defer fake.deleteBrokerMutex.Unlock()
	fake.DeleteBrokerStub = nil
	fake.deleteBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteBrokerMutex.Lock()
	defer fake.deleteBrokerMutex.Unlock()
	fake.DeleteBrokerStub = nil
	if fake.deleteBrokerReturnsOnCall == nil {
		fake.deleteBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteBrokersByFieldQuery(arg1 string) error {
	fake.deleteBrokersByFieldQueryMutex.Lock()
	ret, specificReturn := fake.deleteBrokersByFieldQueryReturnsOnCall[len(fake.deleteBrokersByFieldQueryArgsForCall)]
	fake.deleteBrokersByFieldQueryArgsForCall = append(fake.deleteBrokersByFieldQueryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteBrokersByFieldQuery", []interface{}{arg1})
	fake.deleteBrokersByFieldQueryMutex.Unlock()
	if fake.DeleteBrokersByFieldQueryStub != nil {
		return fake.DeleteBrokersByFieldQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteBrokersByFieldQueryReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteBrokersByFieldQueryCallCount() int {
	fake.deleteBrokersByFieldQueryMutex.RLock()
	defer fake.deleteBrokersByFieldQueryMutex.RUnlock()
	return len(fake.deleteBrokersByFieldQueryArgsForCall)
}

func (fake *FakeClient) DeleteBrokersByFieldQueryCalls(stub func(string) error) {
	fake.deleteBrokersByFieldQueryMutex.Lock()
	defer fake.deleteBrokersByFieldQueryMutex.Unlock()
	fake.DeleteBrokersByFieldQueryStub = stub
}

func (fake *FakeClient) DeleteBrokersByFieldQueryArgsForCall(i int) string {
	fake.deleteBrokersByFieldQueryMutex.RLock()
	defer fake.deleteBrokersByFieldQueryMutex.RUnlock()
	argsForCall := fake.deleteBrokersByFieldQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteBrokersByFieldQueryReturns(result1 error) {
	fake.deleteBrokersByFieldQueryMutex.Lock()
	defer fake.deleteBrokersByFieldQueryMutex.Unlock()
	fake.DeleteBrokersByFieldQueryStub = nil
	fake.deleteBrokersByFieldQueryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteBrokersByFieldQueryReturnsOnCall(i int, result1 error) {
	fake.deleteBrokersByFieldQueryMutex.Lock()
	defer fake.deleteBrokersByFieldQueryMutex.Unlock()
	fake.DeleteBrokersByFieldQueryStub = nil
	if fake.deleteBrokersByFieldQueryReturnsOnCall == nil {
		fake.deleteBrokersByFieldQueryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBrokersByFieldQueryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeletePlatform(arg1 string) error {
	fake.deletePlatformMutex.Lock()
	ret, specificReturn := fake.deletePlatformReturnsOnCall[len(fake.deletePlatformArgsForCall)]
	fake.deletePlatformArgsForCall = append(fake.deletePlatformArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeletePlatform", []interface{}{arg1})
	fake.deletePlatformMutex.Unlock()
	if fake.DeletePlatformStub != nil {
		return fake.DeletePlatformStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deletePlatformReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeletePlatformCallCount() int {
	fake.deletePlatformMutex.RLock()
	defer fake.deletePlatformMutex.RUnlock()
	return len(fake.deletePlatformArgsForCall)
}

func (fake *FakeClient) DeletePlatformCalls(stub func(string) error) {
	fake.deletePlatformMutex.Lock()
	defer fake.deletePlatformMutex.Unlock()
	fake.DeletePlatformStub = stub
}

func (fake *FakeClient) DeletePlatformArgsForCall(i int) string {
	fake.deletePlatformMutex.RLock()
	defer fake.deletePlatformMutex.RUnlock()
	argsForCall := fake.deletePlatformArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeletePlatformReturns(result1 error) {
	fake.deletePlatformMutex.Lock()
	defer fake.deletePlatformMutex.Unlock()
	fake.DeletePlatformStub = nil
	fake.deletePlatformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeletePlatformReturnsOnCall(i int, result1 error) {
	fake.deletePlatformMutex.Lock()
	defer fake.deletePlatformMutex.Unlock()
	fake.DeletePlatformStub = nil
	if fake.deletePlatformReturnsOnCall == nil {
		fake.deletePlatformReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePlatformReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeletePlatformsByFieldQuery(arg1 string) error {
	fake.deletePlatformsByFieldQueryMutex.Lock()
	ret, specificReturn := fake.deletePlatformsByFieldQueryReturnsOnCall[len(fake.deletePlatformsByFieldQueryArgsForCall)]
	fake.deletePlatformsByFieldQueryArgsForCall = append(fake.deletePlatformsByFieldQueryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeletePlatformsByFieldQuery", []interface{}{arg1})
	fake.deletePlatformsByFieldQueryMutex.Unlock()
	if fake.DeletePlatformsByFieldQueryStub != nil {
		return fake.DeletePlatformsByFieldQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deletePlatformsByFieldQueryReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeletePlatformsByFieldQueryCallCount() int {
	fake.deletePlatformsByFieldQueryMutex.RLock()
	defer fake.deletePlatformsByFieldQueryMutex.RUnlock()
	return len(fake.deletePlatformsByFieldQueryArgsForCall)
}

func (fake *FakeClient) DeletePlatformsByFieldQueryCalls(stub func(string) error) {
	fake.deletePlatformsByFieldQueryMutex.Lock()
	defer fake.deletePlatformsByFieldQueryMutex.Unlock()
	fake.DeletePlatformsByFieldQueryStub = stub
}

func (fake *FakeClient) DeletePlatformsByFieldQueryArgsForCall(i int) string {
	fake.deletePlatformsByFieldQueryMutex.RLock()
	defer fake.deletePlatformsByFieldQueryMutex.RUnlock()
	argsForCall := fake.deletePlatformsByFieldQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeletePlatformsByFieldQueryReturns(result1 error) {
	fake.deletePlatformsByFieldQueryMutex.Lock()
	defer fake.deletePlatformsByFieldQueryMutex.Unlock()
	fake.DeletePlatformsByFieldQueryStub = nil
	fake.deletePlatformsByFieldQueryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeletePlatformsByFieldQueryReturnsOnCall(i int, result1 error) {
	fake.deletePlatformsByFieldQueryMutex.Lock()
	defer fake.deletePlatformsByFieldQueryMutex.Unlock()
	fake.DeletePlatformsByFieldQueryStub = nil
	if fake.deletePlatformsByFieldQueryReturnsOnCall == nil {
		fake.deletePlatformsByFieldQueryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePlatformsByFieldQueryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteVisibility(arg1 string) error {
	fake.deleteVisibilityMutex.Lock()
	ret, specificReturn := fake.deleteVisibilityReturnsOnCall[len(fake.deleteVisibilityArgsForCall)]
	fake.deleteVisibilityArgsForCall = append(fake.deleteVisibilityArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteVisibility", []interface{}{arg1})
	fake.deleteVisibilityMutex.Unlock()
	if fake.DeleteVisibilityStub != nil {
		return fake.DeleteVisibilityStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteVisibilityReturns
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteVisibilityCallCount() int {
	fake.deleteVisibilityMutex.RLock()
	defer fake.deleteVisibilityMutex.RUnlock()
	return len(fake.deleteVisibilityArgsForCall)
}

func (fake *FakeClient) DeleteVisibilityCalls(stub func(string) error) {
	fake.deleteVisibilityMutex.Lock()
	defer fake.deleteVisibilityMutex.Unlock()
	fake.DeleteVisibilityStub = stub
}

func (fake *FakeClient) DeleteVisibilityArgsForCall(i int) string {
	fake.deleteVisibilityMutex.RLock()
	defer fake.deleteVisibilityMutex.RUnlock()
	argsForCall := fake.deleteVisibilityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteVisibilityReturns(result1 error) {
	fake.deleteVisibilityMutex.Lock()
	defer fake.deleteVisibilityMutex.Unlock()
	fake.DeleteVisibilityStub = nil
	fake.deleteVisibilityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteVisibilityReturnsOnCall(i int, result1 error) {
	fake.deleteVisibilityMutex.Lock()
	defer fake.deleteVisibilityMutex.Unlock()
	fake.DeleteVisibilityStub = nil
	if fake.deleteVisibilityReturnsOnCall == nil {
		fake.deleteVisibilityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVisibilityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetInfo(arg1 *query.Parameters) (*types.Info, error) {
	fake.getInfoMutex.Lock()
	ret, specificReturn := fake.getInfoReturnsOnCall[len(fake.getInfoArgsForCall)]
	fake.getInfoArgsForCall = append(fake.getInfoArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("GetInfo", []interface{}{arg1})
	fake.getInfoMutex.Unlock()
	if fake.GetInfoStub != nil {
		return fake.GetInfoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetInfoCallCount() int {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	return len(fake.getInfoArgsForCall)
}

func (fake *FakeClient) GetInfoCalls(stub func(*query.Parameters) (*types.Info, error)) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = stub
}

func (fake *FakeClient) GetInfoArgsForCall(i int) *query.Parameters {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	argsForCall := fake.getInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetInfoReturns(result1 *types.Info, result2 error) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = nil
	fake.getInfoReturns = struct {
		result1 *types.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetInfoReturnsOnCall(i int, result1 *types.Info, result2 error) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = nil
	if fake.getInfoReturnsOnCall == nil {
		fake.getInfoReturnsOnCall = make(map[int]struct {
			result1 *types.Info
			result2 error
		})
	}
	fake.getInfoReturnsOnCall[i] = struct {
		result1 *types.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Label(arg1 string, arg2 string, arg3 *types.LabelChanges) error {
	fake.labelMutex.Lock()
	ret, specificReturn := fake.labelReturnsOnCall[len(fake.labelArgsForCall)]
	fake.labelArgsForCall = append(fake.labelArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *types.LabelChanges
	}{arg1, arg2, arg3})
	fake.recordInvocation("Label", []interface{}{arg1, arg2, arg3})
	fake.labelMutex.Unlock()
	if fake.LabelStub != nil {
		return fake.LabelStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.labelReturns
	return fakeReturns.result1
}

func (fake *FakeClient) LabelCallCount() int {
	fake.labelMutex.RLock()
	defer fake.labelMutex.RUnlock()
	return len(fake.labelArgsForCall)
}

func (fake *FakeClient) LabelCalls(stub func(string, string, *types.LabelChanges) error) {
	fake.labelMutex.Lock()
	defer fake.labelMutex.Unlock()
	fake.LabelStub = stub
}

func (fake *FakeClient) LabelArgsForCall(i int) (string, string, *types.LabelChanges) {
	fake.labelMutex.RLock()
	defer fake.labelMutex.RUnlock()
	argsForCall := fake.labelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) LabelReturns(result1 error) {
	fake.labelMutex.Lock()
	defer fake.labelMutex.Unlock()
	fake.LabelStub = nil
	fake.labelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) LabelReturnsOnCall(i int, result1 error) {
	fake.labelMutex.Lock()
	defer fake.labelMutex.Unlock()
	fake.LabelStub = nil
	if fake.labelReturnsOnCall == nil {
		fake.labelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.labelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) ListBrokers(arg1 *query.Parameters) (*types.Brokers, error) {
	fake.listBrokersMutex.Lock()
	ret, specificReturn := fake.listBrokersReturnsOnCall[len(fake.listBrokersArgsForCall)]
	fake.listBrokersArgsForCall = append(fake.listBrokersArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("ListBrokers", []interface{}{arg1})
	fake.listBrokersMutex.Unlock()
	if fake.ListBrokersStub != nil {
		return fake.ListBrokersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListBrokersCallCount() int {
	fake.listBrokersMutex.RLock()
	defer fake.listBrokersMutex.RUnlock()
	return len(fake.listBrokersArgsForCall)
}

func (fake *FakeClient) ListBrokersCalls(stub func(*query.Parameters) (*types.Brokers, error)) {
	fake.listBrokersMutex.Lock()
	defer fake.listBrokersMutex.Unlock()
	fake.ListBrokersStub = stub
}

func (fake *FakeClient) ListBrokersArgsForCall(i int) *query.Parameters {
	fake.listBrokersMutex.RLock()
	defer fake.listBrokersMutex.RUnlock()
	argsForCall := fake.listBrokersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListBrokersReturns(result1 *types.Brokers, result2 error) {
	fake.listBrokersMutex.Lock()
	defer fake.listBrokersMutex.Unlock()
	fake.ListBrokersStub = nil
	fake.listBrokersReturns = struct {
		result1 *types.Brokers
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListBrokersReturnsOnCall(i int, result1 *types.Brokers, result2 error) {
	fake.listBrokersMutex.Lock()
	defer fake.listBrokersMutex.Unlock()
	fake.ListBrokersStub = nil
	if fake.listBrokersReturnsOnCall == nil {
		fake.listBrokersReturnsOnCall = make(map[int]struct {
			result1 *types.Brokers
			result2 error
		})
	}
	fake.listBrokersReturnsOnCall[i] = struct {
		result1 *types.Brokers
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListOfferings(arg1 *query.Parameters) (*types.ServiceOfferings, error) {
	fake.listOfferingsMutex.Lock()
	ret, specificReturn := fake.listOfferingsReturnsOnCall[len(fake.listOfferingsArgsForCall)]
	fake.listOfferingsArgsForCall = append(fake.listOfferingsArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("ListOfferings", []interface{}{arg1})
	fake.listOfferingsMutex.Unlock()
	if fake.ListOfferingsStub != nil {
		return fake.ListOfferingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOfferingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListOfferingsCallCount() int {
	fake.listOfferingsMutex.RLock()
	defer fake.listOfferingsMutex.RUnlock()
	return len(fake.listOfferingsArgsForCall)
}

func (fake *FakeClient) ListOfferingsCalls(stub func(*query.Parameters) (*types.ServiceOfferings, error)) {
	fake.listOfferingsMutex.Lock()
	defer fake.listOfferingsMutex.Unlock()
	fake.ListOfferingsStub = stub
}

func (fake *FakeClient) ListOfferingsArgsForCall(i int) *query.Parameters {
	fake.listOfferingsMutex.RLock()
	defer fake.listOfferingsMutex.RUnlock()
	argsForCall := fake.listOfferingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListOfferingsReturns(result1 *types.ServiceOfferings, result2 error) {
	fake.listOfferingsMutex.Lock()
	defer fake.listOfferingsMutex.Unlock()
	fake.ListOfferingsStub = nil
	fake.listOfferingsReturns = struct {
		result1 *types.ServiceOfferings
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListOfferingsReturnsOnCall(i int, result1 *types.ServiceOfferings, result2 error) {
	fake.listOfferingsMutex.Lock()
	defer fake.listOfferingsMutex.Unlock()
	fake.ListOfferingsStub = nil
	if fake.listOfferingsReturnsOnCall == nil {
		fake.listOfferingsReturnsOnCall = make(map[int]struct {
			result1 *types.ServiceOfferings
			result2 error
		})
	}
	fake.listOfferingsReturnsOnCall[i] = struct {
		result1 *types.ServiceOfferings
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListPlans(arg1 *query.Parameters) (*types.ServicePlans, error) {
	fake.listPlansMutex.Lock()
	ret, specificReturn := fake.listPlansReturnsOnCall[len(fake.listPlansArgsForCall)]
	fake.listPlansArgsForCall = append(fake.listPlansArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("ListPlans", []interface{}{arg1})
	fake.listPlansMutex.Unlock()
	if fake.ListPlansStub != nil {
		return fake.ListPlansStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPlansReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListPlansCallCount() int {
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	return len(fake.listPlansArgsForCall)
}

func (fake *FakeClient) ListPlansCalls(stub func(*query.Parameters) (*types.ServicePlans, error)) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = stub
}

func (fake *FakeClient) ListPlansArgsForCall(i int) *query.Parameters {
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	argsForCall := fake.listPlansArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListPlansReturns(result1 *types.ServicePlans, result2 error) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = nil
	fake.listPlansReturns = struct {
		result1 *types.ServicePlans
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListPlansReturnsOnCall(i int, result1 *types.ServicePlans, result2 error) {
	fake.listPlansMutex.Lock()
	defer fake.listPlansMutex.Unlock()
	fake.ListPlansStub = nil
	if fake.listPlansReturnsOnCall == nil {
		fake.listPlansReturnsOnCall = make(map[int]struct {
			result1 *types.ServicePlans
			result2 error
		})
	}
	fake.listPlansReturnsOnCall[i] = struct {
		result1 *types.ServicePlans
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListPlatforms(arg1 *query.Parameters) (*types.Platforms, error) {
	fake.listPlatformsMutex.Lock()
	ret, specificReturn := fake.listPlatformsReturnsOnCall[len(fake.listPlatformsArgsForCall)]
	fake.listPlatformsArgsForCall = append(fake.listPlatformsArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("ListPlatforms", []interface{}{arg1})
	fake.listPlatformsMutex.Unlock()
	if fake.ListPlatformsStub != nil {
		return fake.ListPlatformsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPlatformsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListPlatformsCallCount() int {
	fake.listPlatformsMutex.RLock()
	defer fake.listPlatformsMutex.RUnlock()
	return len(fake.listPlatformsArgsForCall)
}

func (fake *FakeClient) ListPlatformsCalls(stub func(*query.Parameters) (*types.Platforms, error)) {
	fake.listPlatformsMutex.Lock()
	defer fake.listPlatformsMutex.Unlock()
	fake.ListPlatformsStub = stub
}

func (fake *FakeClient) ListPlatformsArgsForCall(i int) *query.Parameters {
	fake.listPlatformsMutex.RLock()
	defer fake.listPlatformsMutex.RUnlock()
	argsForCall := fake.listPlatformsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListPlatformsReturns(result1 *types.Platforms, result2 error) {
	fake.listPlatformsMutex.Lock()
	defer fake.listPlatformsMutex.Unlock()
	fake.ListPlatformsStub = nil
	fake.listPlatformsReturns = struct {
		result1 *types.Platforms
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListPlatformsReturnsOnCall(i int, result1 *types.Platforms, result2 error) {
	fake.listPlatformsMutex.Lock()
	defer fake.listPlatformsMutex.Unlock()
	fake.ListPlatformsStub = nil
	if fake.listPlatformsReturnsOnCall == nil {
		fake.listPlatformsReturnsOnCall = make(map[int]struct {
			result1 *types.Platforms
			result2 error
		})
	}
	fake.listPlatformsReturnsOnCall[i] = struct {
		result1 *types.Platforms
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListVisibilities(arg1 *query.Parameters) (*types.Visibilities, error) {
	fake.listVisibilitiesMutex.Lock()
	ret, specificReturn := fake.listVisibilitiesReturnsOnCall[len(fake.listVisibilitiesArgsForCall)]
	fake.listVisibilitiesArgsForCall = append(fake.listVisibilitiesArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("ListVisibilities", []interface{}{arg1})
	fake.listVisibilitiesMutex.Unlock()
	if fake.ListVisibilitiesStub != nil {
		return fake.ListVisibilitiesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVisibilitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListVisibilitiesCallCount() int {
	fake.listVisibilitiesMutex.RLock()
	defer fake.listVisibilitiesMutex.RUnlock()
	return len(fake.listVisibilitiesArgsForCall)
}

func (fake *FakeClient) ListVisibilitiesCalls(stub func(*query.Parameters) (*types.Visibilities, error)) {
	fake.listVisibilitiesMutex.Lock()
	defer fake.listVisibilitiesMutex.Unlock()
	fake.ListVisibilitiesStub = stub
}

func (fake *FakeClient) ListVisibilitiesArgsForCall(i int) *query.Parameters {
	fake.listVisibilitiesMutex.RLock()
	defer fake.listVisibilitiesMutex.RUnlock()
	argsForCall := fake.listVisibilitiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListVisibilitiesReturns(result1 *types.Visibilities, result2 error) {
	fake.listVisibilitiesMutex.Lock()
	defer fake.listVisibilitiesMutex.Unlock()
	fake.ListVisibilitiesStub = nil
	fake.listVisibilitiesReturns = struct {
		result1 *types.Visibilities
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListVisibilitiesReturnsOnCall(i int, result1 *types.Visibilities, result2 error) {
	fake.listVisibilitiesMutex.Lock()
	defer fake.listVisibilitiesMutex.Unlock()
	fake.ListVisibilitiesStub = nil
	if fake.listVisibilitiesReturnsOnCall == nil {
		fake.listVisibilitiesReturnsOnCall = make(map[int]struct {
			result1 *types.Visibilities
			result2 error
		})
	}
	fake.listVisibilitiesReturnsOnCall[i] = struct {
		result1 *types.Visibilities
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Marketplace(arg1 *query.Parameters) (*types.Marketplace, error) {
	fake.marketplaceMutex.Lock()
	ret, specificReturn := fake.marketplaceReturnsOnCall[len(fake.marketplaceArgsForCall)]
	fake.marketplaceArgsForCall = append(fake.marketplaceArgsForCall, struct {
		arg1 *query.Parameters
	}{arg1})
	fake.recordInvocation("Marketplace", []interface{}{arg1})
	fake.marketplaceMutex.Unlock()
	if fake.MarketplaceStub != nil {
		return fake.MarketplaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.marketplaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) MarketplaceCallCount() int {
	fake.marketplaceMutex.RLock()
	defer fake.marketplaceMutex.RUnlock()
	return len(fake.marketplaceArgsForCall)
}

func (fake *FakeClient) MarketplaceCalls(stub func(*query.Parameters) (*types.Marketplace, error)) {
	fake.marketplaceMutex.Lock()
	defer fake.marketplaceMutex.Unlock()
	fake.MarketplaceStub = stub
}

func (fake *FakeClient) MarketplaceArgsForCall(i int) *query.Parameters {
	fake.marketplaceMutex.RLock()
	defer fake.marketplaceMutex.RUnlock()
	argsForCall := fake.marketplaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) MarketplaceReturns(result1 *types.Marketplace, result2 error) {
	fake.marketplaceMutex.Lock()
	defer fake.marketplaceMutex.Unlock()
	fake.MarketplaceStub = nil
	fake.marketplaceReturns = struct {
		result1 *types.Marketplace
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) MarketplaceReturnsOnCall(i int, result1 *types.Marketplace, result2 error) {
	fake.marketplaceMutex.Lock()
	defer fake.marketplaceMutex.Unlock()
	fake.MarketplaceStub = nil
	if fake.marketplaceReturnsOnCall == nil {
		fake.marketplaceReturnsOnCall = make(map[int]struct {
			result1 *types.Marketplace
			result2 error
		})
	}
	fake.marketplaceReturnsOnCall[i] = struct {
		result1 *types.Marketplace
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterBroker(arg1 *types.Broker) (*types.Broker, error) {
	fake.registerBrokerMutex.Lock()
	ret, specificReturn := fake.registerBrokerReturnsOnCall[len(fake.registerBrokerArgsForCall)]
	fake.registerBrokerArgsForCall = append(fake.registerBrokerArgsForCall, struct {
		arg1 *types.Broker
	}{arg1})
	fake.recordInvocation("RegisterBroker", []interface{}{arg1})
	fake.registerBrokerMutex.Unlock()
	if fake.RegisterBrokerStub != nil {
		return fake.RegisterBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RegisterBrokerCallCount() int {
	fake.registerBrokerMutex.RLock()
	defer fake.registerBrokerMutex.RUnlock()
	return len(fake.registerBrokerArgsForCall)
}

func (fake *FakeClient) RegisterBrokerCalls(stub func(*types.Broker) (*types.Broker, error)) {
	fake.registerBrokerMutex.Lock()
	defer fake.registerBrokerMutex.Unlock()
	fake.RegisterBrokerStub = stub
}

func (fake *FakeClient) RegisterBrokerArgsForCall(i int) *types.Broker {
	fake.registerBrokerMutex.RLock()
	defer fake.registerBrokerMutex.RUnlock()
	argsForCall := fake.registerBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) RegisterBrokerReturns(result1 *types.Broker, result2 error) {
	fake.registerBrokerMutex.Lock()
	defer fake.registerBrokerMutex.Unlock()
	fake.RegisterBrokerStub = nil
	fake.registerBrokerReturns = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterBrokerReturnsOnCall(i int, result1 *types.Broker, result2 error) {
	fake.registerBrokerMutex.Lock()
	defer fake.registerBrokerMutex.Unlock()
	fake.RegisterBrokerStub = nil
	if fake.registerBrokerReturnsOnCall == nil {
		fake.registerBrokerReturnsOnCall = make(map[int]struct {
			result1 *types.Broker
			result2 error
		})
	}
	fake.registerBrokerReturnsOnCall[i] = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterPlatform(arg1 *types.Platform) (*types.Platform, error) {
	fake.registerPlatformMutex.Lock()
	ret, specificReturn := fake.registerPlatformReturnsOnCall[len(fake.registerPlatformArgsForCall)]
	fake.registerPlatformArgsForCall = append(fake.registerPlatformArgsForCall, struct {
		arg1 *types.Platform
	}{arg1})
	fake.recordInvocation("RegisterPlatform", []interface{}{arg1})
	fake.registerPlatformMutex.Unlock()
	if fake.RegisterPlatformStub != nil {
		return fake.RegisterPlatformStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerPlatformReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RegisterPlatformCallCount() int {
	fake.registerPlatformMutex.RLock()
	defer fake.registerPlatformMutex.RUnlock()
	return len(fake.registerPlatformArgsForCall)
}

func (fake *FakeClient) RegisterPlatformCalls(stub func(*types.Platform) (*types.Platform, error)) {
	fake.registerPlatformMutex.Lock()
	defer fake.registerPlatformMutex.Unlock()
	fake.RegisterPlatformStub = stub
}

func (fake *FakeClient) RegisterPlatformArgsForCall(i int) *types.Platform {
	fake.registerPlatformMutex.RLock()
	defer fake.registerPlatformMutex.RUnlock()
	argsForCall := fake.registerPlatformArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) RegisterPlatformReturns(result1 *types.Platform, result2 error) {
	fake.registerPlatformMutex.Lock()
	defer fake.registerPlatformMutex.Unlock()
	fake.RegisterPlatformStub = nil
	fake.registerPlatformReturns = struct {
		result1 *types.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterPlatformReturnsOnCall(i int, result1 *types.Platform, result2 error) {
	fake.registerPlatformMutex.Lock()
	defer fake.registerPlatformMutex.Unlock()
	fake.RegisterPlatformStub = nil
	if fake.registerPlatformReturnsOnCall == nil {
		fake.registerPlatformReturnsOnCall = make(map[int]struct {
			result1 *types.Platform
			result2 error
		})
	}
	fake.registerPlatformReturnsOnCall[i] = struct {
		result1 *types.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterVisibility(arg1 *types.Visibility) (*types.Visibility, error) {
	fake.registerVisibilityMutex.Lock()
	ret, specificReturn := fake.registerVisibilityReturnsOnCall[len(fake.registerVisibilityArgsForCall)]
	fake.registerVisibilityArgsForCall = append(fake.registerVisibilityArgsForCall, struct {
		arg1 *types.Visibility
	}{arg1})
	fake.recordInvocation("RegisterVisibility", []interface{}{arg1})
	fake.registerVisibilityMutex.Unlock()
	if fake.RegisterVisibilityStub != nil {
		return fake.RegisterVisibilityStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerVisibilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) RegisterVisibilityCallCount() int {
	fake.registerVisibilityMutex.RLock()
	defer fake.registerVisibilityMutex.RUnlock()
	return len(fake.registerVisibilityArgsForCall)
}

func (fake *FakeClient) RegisterVisibilityCalls(stub func(*types.Visibility) (*types.Visibility, error)) {
	fake.registerVisibilityMutex.Lock()
	defer fake.registerVisibilityMutex.Unlock()
	fake.RegisterVisibilityStub = stub
}

func (fake *FakeClient) RegisterVisibilityArgsForCall(i int) *types.Visibility {
	fake.registerVisibilityMutex.RLock()
	defer fake.registerVisibilityMutex.RUnlock()
	argsForCall := fake.registerVisibilityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) RegisterVisibilityReturns(result1 *types.Visibility, result2 error) {
	fake.registerVisibilityMutex.Lock()
	defer fake.registerVisibilityMutex.Unlock()
	fake.RegisterVisibilityStub = nil
	fake.registerVisibilityReturns = struct {
		result1 *types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) RegisterVisibilityReturnsOnCall(i int, result1 *types.Visibility, result2 error) {
	fake.registerVisibilityMutex.Lock()
	defer fake.registerVisibilityMutex.Unlock()
	fake.RegisterVisibilityStub = nil
	if fake.registerVisibilityReturnsOnCall == nil {
		fake.registerVisibilityReturnsOnCall = make(map[int]struct {
			result1 *types.Visibility
			result2 error
		})
	}
	fake.registerVisibilityReturnsOnCall[i] = struct {
		result1 *types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateBroker(arg1 string, arg2 *types.Broker) (*types.Broker, error) {
	fake.updateBrokerMutex.Lock()
	ret, specificReturn := fake.updateBrokerReturnsOnCall[len(fake.updateBrokerArgsForCall)]
	fake.updateBrokerArgsForCall = append(fake.updateBrokerArgsForCall, struct {
		arg1 string
		arg2 *types.Broker
	}{arg1, arg2})
	fake.recordInvocation("UpdateBroker", []interface{}{arg1, arg2})
	fake.updateBrokerMutex.Unlock()
	if fake.UpdateBrokerStub != nil {
		return fake.UpdateBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdateBrokerCallCount() int {
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	return len(fake.updateBrokerArgsForCall)
}

func (fake *FakeClient) UpdateBrokerCalls(stub func(string, *types.Broker) (*types.Broker, error)) {
	fake.updateBrokerMutex.Lock()
	defer fake.updateBrokerMutex.Unlock()
	fake.UpdateBrokerStub = stub
}

func (fake *FakeClient) UpdateBrokerArgsForCall(i int) (string, *types.Broker) {
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	argsForCall := fake.updateBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) UpdateBrokerReturns(result1 *types.Broker, result2 error) {
	fake.updateBrokerMutex.Lock()
	defer fake.updateBrokerMutex.Unlock()
	fake.UpdateBrokerStub = nil
	fake.updateBrokerReturns = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateBrokerReturnsOnCall(i int, result1 *types.Broker, result2 error) {
	fake.updateBrokerMutex.Lock()
	defer fake.updateBrokerMutex.Unlock()
	fake.UpdateBrokerStub = nil
	if fake.updateBrokerReturnsOnCall == nil {
		fake.updateBrokerReturnsOnCall = make(map[int]struct {
			result1 *types.Broker
			result2 error
		})
	}
	fake.updateBrokerReturnsOnCall[i] = struct {
		result1 *types.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdatePlatform(arg1 string, arg2 *types.Platform) (*types.Platform, error) {
	fake.updatePlatformMutex.Lock()
	ret, specificReturn := fake.updatePlatformReturnsOnCall[len(fake.updatePlatformArgsForCall)]
	fake.updatePlatformArgsForCall = append(fake.updatePlatformArgsForCall, struct {
		arg1 string
		arg2 *types.Platform
	}{arg1, arg2})
	fake.recordInvocation("UpdatePlatform", []interface{}{arg1, arg2})
	fake.updatePlatformMutex.Unlock()
	if fake.UpdatePlatformStub != nil {
		return fake.UpdatePlatformStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updatePlatformReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdatePlatformCallCount() int {
	fake.updatePlatformMutex.RLock()
	defer fake.updatePlatformMutex.RUnlock()
	return len(fake.updatePlatformArgsForCall)
}

func (fake *FakeClient) UpdatePlatformCalls(stub func(string, *types.Platform) (*types.Platform, error)) {
	fake.updatePlatformMutex.Lock()
	defer fake.updatePlatformMutex.Unlock()
	fake.UpdatePlatformStub = stub
}

func (fake *FakeClient) UpdatePlatformArgsForCall(i int) (string, *types.Platform) {
	fake.updatePlatformMutex.RLock()
	defer fake.updatePlatformMutex.RUnlock()
	argsForCall := fake.updatePlatformArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) UpdatePlatformReturns(result1 *types.Platform, result2 error) {
	fake.updatePlatformMutex.Lock()
	defer fake.updatePlatformMutex.Unlock()
	fake.UpdatePlatformStub = nil
	fake.updatePlatformReturns = struct {
		result1 *types.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdatePlatformReturnsOnCall(i int, result1 *types.Platform, result2 error) {
	fake.updatePlatformMutex.Lock()
	defer fake.updatePlatformMutex.Unlock()
	fake.UpdatePlatformStub = nil
	if fake.updatePlatformReturnsOnCall == nil {
		fake.updatePlatformReturnsOnCall = make(map[int]struct {
			result1 *types.Platform
			result2 error
		})
	}
	fake.updatePlatformReturnsOnCall[i] = struct {
		result1 *types.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateVisibility(arg1 string, arg2 *types.Visibility) (*types.Visibility, error) {
	fake.updateVisibilityMutex.Lock()
	ret, specificReturn := fake.updateVisibilityReturnsOnCall[len(fake.updateVisibilityArgsForCall)]
	fake.updateVisibilityArgsForCall = append(fake.updateVisibilityArgsForCall, struct {
		arg1 string
		arg2 *types.Visibility
	}{arg1, arg2})
	fake.recordInvocation("UpdateVisibility", []interface{}{arg1, arg2})
	fake.updateVisibilityMutex.Unlock()
	if fake.UpdateVisibilityStub != nil {
		return fake.UpdateVisibilityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateVisibilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdateVisibilityCallCount() int {
	fake.updateVisibilityMutex.RLock()
	defer fake.updateVisibilityMutex.RUnlock()
	return len(fake.updateVisibilityArgsForCall)
}

func (fake *FakeClient) UpdateVisibilityCalls(stub func(string, *types.Visibility) (*types.Visibility, error)) {
	fake.updateVisibilityMutex.Lock()
	defer fake.updateVisibilityMutex.Unlock()
	fake.UpdateVisibilityStub = stub
}

func (fake *FakeClient) UpdateVisibilityArgsForCall(i int) (string, *types.Visibility) {
	fake.updateVisibilityMutex.RLock()
	defer fake.updateVisibilityMutex.RUnlock()
	argsForCall := fake.updateVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) UpdateVisibilityReturns(result1 *types.Visibility, result2 error) {
	fake.updateVisibilityMutex.Lock()
	defer fake.updateVisibilityMutex.Unlock()
	fake.UpdateVisibilityStub = nil
	fake.updateVisibilityReturns = struct {
		result1 *types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateVisibilityReturnsOnCall(i int, result1 *types.Visibility, result2 error) {
	fake.updateVisibilityMutex.Lock()
	defer fake.updateVisibilityMutex.Unlock()
	fake.UpdateVisibilityStub = nil
	if fake.updateVisibilityReturnsOnCall == nil {
		fake.updateVisibilityReturnsOnCall = make(map[int]struct {
			result1 *types.Visibility
			result2 error
		})
	}
	fake.updateVisibilityReturnsOnCall[i] = struct {
		result1 *types.Visibility
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.callMutex.RLock()
	defer fake.callMutex.RUnlock()
	fake.deleteBrokerMutex.RLock()
	defer fake.deleteBrokerMutex.RUnlock()
	fake.deleteBrokersByFieldQueryMutex.RLock()
	defer fake.deleteBrokersByFieldQueryMutex.RUnlock()
	fake.deletePlatformMutex.RLock()
	defer fake.deletePlatformMutex.RUnlock()
	fake.deletePlatformsByFieldQueryMutex.RLock()
	defer fake.deletePlatformsByFieldQueryMutex.RUnlock()
	fake.deleteVisibilityMutex.RLock()
	defer fake.deleteVisibilityMutex.RUnlock()
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	fake.labelMutex.RLock()
	defer fake.labelMutex.RUnlock()
	fake.listBrokersMutex.RLock()
	defer fake.listBrokersMutex.RUnlock()
	fake.listOfferingsMutex.RLock()
	defer fake.listOfferingsMutex.RUnlock()
	fake.listPlansMutex.RLock()
	defer fake.listPlansMutex.RUnlock()
	fake.listPlatformsMutex.RLock()
	defer fake.listPlatformsMutex.RUnlock()
	fake.listVisibilitiesMutex.RLock()
	defer fake.listVisibilitiesMutex.RUnlock()
	fake.marketplaceMutex.RLock()
	defer fake.marketplaceMutex.RUnlock()
	fake.registerBrokerMutex.RLock()
	defer fake.registerBrokerMutex.RUnlock()
	fake.registerPlatformMutex.RLock()
	defer fake.registerPlatformMutex.RUnlock()
	fake.registerVisibilityMutex.RLock()
	defer fake.registerVisibilityMutex.RUnlock()
	fake.updateBrokerMutex.RLock()
	defer fake.updateBrokerMutex.RUnlock()
	fake.updatePlatformMutex.RLock()
	defer fake.updatePlatformMutex.RUnlock()
	fake.updateVisibilityMutex.RLock()
	defer fake.updateVisibilityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ smclient.Client = new(FakeClient)
