// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"net/http"
	"sync"

	"github.com/Peripli/service-manager-cli/pkg/auth"
)

type FakeTokenRefresher struct {
	RefreshStub        func(auth.Token) (*auth.Token, error)
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 auth.Token
	}
	refreshReturns struct {
		result1 *auth.Token
		result2 error
	}
	refreshReturnsOnCall map[int]struct {
		result1 *auth.Token
		result2 error
	}
	ClientStub        func(*auth.Token) *http.Client
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
		arg1 *auth.Token
	}
	clientReturns struct {
		result1 *http.Client
	}
	clientReturnsOnCall map[int]struct {
		result1 *http.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenRefresher) Refresh(arg1 auth.Token) (*auth.Token, error) {
	fake.refreshMutex.Lock()
	ret, specificReturn := fake.refreshReturnsOnCall[len(fake.refreshArgsForCall)]
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 auth.Token
	}{arg1})
	fake.recordInvocation("Refresh", []interface{}{arg1})
	fake.refreshMutex.Unlock()
	if fake.RefreshStub != nil {
		return fake.RefreshStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.refreshReturns.result1, fake.refreshReturns.result2
}

func (fake *FakeTokenRefresher) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeTokenRefresher) RefreshArgsForCall(i int) auth.Token {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return fake.refreshArgsForCall[i].arg1
}

func (fake *FakeTokenRefresher) RefreshReturns(result1 *auth.Token, result2 error) {
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenRefresher) RefreshReturnsOnCall(i int, result1 *auth.Token, result2 error) {
	fake.RefreshStub = nil
	if fake.refreshReturnsOnCall == nil {
		fake.refreshReturnsOnCall = make(map[int]struct {
			result1 *auth.Token
			result2 error
		})
	}
	fake.refreshReturnsOnCall[i] = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenRefresher) Client(arg1 *auth.Token) *http.Client {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
		arg1 *auth.Token
	}{arg1})
	fake.recordInvocation("Client", []interface{}{arg1})
	fake.clientMutex.Unlock()
	if fake.ClientStub != nil {
		return fake.ClientStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.clientReturns.result1
}

func (fake *FakeTokenRefresher) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeTokenRefresher) ClientArgsForCall(i int) *auth.Token {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return fake.clientArgsForCall[i].arg1
}

func (fake *FakeTokenRefresher) ClientReturns(result1 *http.Client) {
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 *http.Client
	}{result1}
}

func (fake *FakeTokenRefresher) ClientReturnsOnCall(i int, result1 *http.Client) {
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 *http.Client
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 *http.Client
	}{result1}
}

func (fake *FakeTokenRefresher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenRefresher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.TokenRefresher = new(FakeTokenRefresher)
