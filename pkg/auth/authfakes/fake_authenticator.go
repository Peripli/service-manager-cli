// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/Peripli/service-manager-cli/pkg/auth"
)

type FakeAuthenticator struct {
	ClientCredentialsStub        func() (*auth.Token, error)
	clientCredentialsMutex       sync.RWMutex
	clientCredentialsArgsForCall []struct{}
	clientCredentialsReturns     struct {
		result1 *auth.Token
		result2 error
	}
	clientCredentialsReturnsOnCall map[int]struct {
		result1 *auth.Token
		result2 error
	}
	PasswordCredentialsStub        func(user, password string) (*auth.Token, error)
	passwordCredentialsMutex       sync.RWMutex
	passwordCredentialsArgsForCall []struct {
		user     string
		password string
	}
	passwordCredentialsReturns struct {
		result1 *auth.Token
		result2 error
	}
	passwordCredentialsReturnsOnCall map[int]struct {
		result1 *auth.Token
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticator) ClientCredentials() (*auth.Token, error) {
	fake.clientCredentialsMutex.Lock()
	ret, specificReturn := fake.clientCredentialsReturnsOnCall[len(fake.clientCredentialsArgsForCall)]
	fake.clientCredentialsArgsForCall = append(fake.clientCredentialsArgsForCall, struct{}{})
	fake.recordInvocation("ClientCredentials", []interface{}{})
	fake.clientCredentialsMutex.Unlock()
	if fake.ClientCredentialsStub != nil {
		return fake.ClientCredentialsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.clientCredentialsReturns.result1, fake.clientCredentialsReturns.result2
}

func (fake *FakeAuthenticator) ClientCredentialsCallCount() int {
	fake.clientCredentialsMutex.RLock()
	defer fake.clientCredentialsMutex.RUnlock()
	return len(fake.clientCredentialsArgsForCall)
}

func (fake *FakeAuthenticator) ClientCredentialsReturns(result1 *auth.Token, result2 error) {
	fake.ClientCredentialsStub = nil
	fake.clientCredentialsReturns = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) ClientCredentialsReturnsOnCall(i int, result1 *auth.Token, result2 error) {
	fake.ClientCredentialsStub = nil
	if fake.clientCredentialsReturnsOnCall == nil {
		fake.clientCredentialsReturnsOnCall = make(map[int]struct {
			result1 *auth.Token
			result2 error
		})
	}
	fake.clientCredentialsReturnsOnCall[i] = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) PasswordCredentials(user string, password string) (*auth.Token, error) {
	fake.passwordCredentialsMutex.Lock()
	ret, specificReturn := fake.passwordCredentialsReturnsOnCall[len(fake.passwordCredentialsArgsForCall)]
	fake.passwordCredentialsArgsForCall = append(fake.passwordCredentialsArgsForCall, struct {
		user     string
		password string
	}{user, password})
	fake.recordInvocation("PasswordCredentials", []interface{}{user, password})
	fake.passwordCredentialsMutex.Unlock()
	if fake.PasswordCredentialsStub != nil {
		return fake.PasswordCredentialsStub(user, password)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.passwordCredentialsReturns.result1, fake.passwordCredentialsReturns.result2
}

func (fake *FakeAuthenticator) PasswordCredentialsCallCount() int {
	fake.passwordCredentialsMutex.RLock()
	defer fake.passwordCredentialsMutex.RUnlock()
	return len(fake.passwordCredentialsArgsForCall)
}

func (fake *FakeAuthenticator) PasswordCredentialsArgsForCall(i int) (string, string) {
	fake.passwordCredentialsMutex.RLock()
	defer fake.passwordCredentialsMutex.RUnlock()
	return fake.passwordCredentialsArgsForCall[i].user, fake.passwordCredentialsArgsForCall[i].password
}

func (fake *FakeAuthenticator) PasswordCredentialsReturns(result1 *auth.Token, result2 error) {
	fake.PasswordCredentialsStub = nil
	fake.passwordCredentialsReturns = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) PasswordCredentialsReturnsOnCall(i int, result1 *auth.Token, result2 error) {
	fake.PasswordCredentialsStub = nil
	if fake.passwordCredentialsReturnsOnCall == nil {
		fake.passwordCredentialsReturnsOnCall = make(map[int]struct {
			result1 *auth.Token
			result2 error
		})
	}
	fake.passwordCredentialsReturnsOnCall[i] = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientCredentialsMutex.RLock()
	defer fake.clientCredentialsMutex.RUnlock()
	fake.passwordCredentialsMutex.RLock()
	defer fake.passwordCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Authenticator = new(FakeAuthenticator)
