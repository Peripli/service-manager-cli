// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"net/http"
	"sync"

	"github.com/Peripli/service-manager-cli/pkg/auth"
)

type FakeAuthenticationStrategy struct {
	AuthenticateStub        func(user, password string) (*auth.Token, error)
	authenticateMutex       sync.RWMutex
	authenticateArgsForCall []struct {
		user     string
		password string
	}
	authenticateReturns struct {
		result1 *auth.Token
		result2 error
	}
	authenticateReturnsOnCall map[int]struct {
		result1 *auth.Token
		result2 error
	}
	TokenStub        func() (*auth.Token, error)
	tokenMutex       sync.RWMutex
	tokenArgsForCall []struct{}
	tokenReturns     struct {
		result1 *auth.Token
		result2 error
	}
	tokenReturnsOnCall map[int]struct {
		result1 *auth.Token
		result2 error
	}
	ClientStub        func() *http.Client
	clientMutex       sync.RWMutex
	clientArgsForCall []struct{}
	clientReturns     struct {
		result1 *http.Client
	}
	clientReturnsOnCall map[int]struct {
		result1 *http.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthenticationStrategy) Authenticate(user string, password string) (*auth.Token, error) {
	fake.authenticateMutex.Lock()
	ret, specificReturn := fake.authenticateReturnsOnCall[len(fake.authenticateArgsForCall)]
	fake.authenticateArgsForCall = append(fake.authenticateArgsForCall, struct {
		user     string
		password string
	}{user, password})
	fake.recordInvocation("Authenticate", []interface{}{user, password})
	fake.authenticateMutex.Unlock()
	if fake.AuthenticateStub != nil {
		return fake.AuthenticateStub(user, password)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.authenticateReturns.result1, fake.authenticateReturns.result2
}

func (fake *FakeAuthenticationStrategy) AuthenticateCallCount() int {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return len(fake.authenticateArgsForCall)
}

func (fake *FakeAuthenticationStrategy) AuthenticateArgsForCall(i int) (string, string) {
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	return fake.authenticateArgsForCall[i].user, fake.authenticateArgsForCall[i].password
}

func (fake *FakeAuthenticationStrategy) AuthenticateReturns(result1 *auth.Token, result2 error) {
	fake.AuthenticateStub = nil
	fake.authenticateReturns = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticationStrategy) AuthenticateReturnsOnCall(i int, result1 *auth.Token, result2 error) {
	fake.AuthenticateStub = nil
	if fake.authenticateReturnsOnCall == nil {
		fake.authenticateReturnsOnCall = make(map[int]struct {
			result1 *auth.Token
			result2 error
		})
	}
	fake.authenticateReturnsOnCall[i] = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticationStrategy) Token() (*auth.Token, error) {
	fake.tokenMutex.Lock()
	ret, specificReturn := fake.tokenReturnsOnCall[len(fake.tokenArgsForCall)]
	fake.tokenArgsForCall = append(fake.tokenArgsForCall, struct{}{})
	fake.recordInvocation("Token", []interface{}{})
	fake.tokenMutex.Unlock()
	if fake.TokenStub != nil {
		return fake.TokenStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tokenReturns.result1, fake.tokenReturns.result2
}

func (fake *FakeAuthenticationStrategy) TokenCallCount() int {
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	return len(fake.tokenArgsForCall)
}

func (fake *FakeAuthenticationStrategy) TokenReturns(result1 *auth.Token, result2 error) {
	fake.TokenStub = nil
	fake.tokenReturns = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticationStrategy) TokenReturnsOnCall(i int, result1 *auth.Token, result2 error) {
	fake.TokenStub = nil
	if fake.tokenReturnsOnCall == nil {
		fake.tokenReturnsOnCall = make(map[int]struct {
			result1 *auth.Token
			result2 error
		})
	}
	fake.tokenReturnsOnCall[i] = struct {
		result1 *auth.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthenticationStrategy) Client() *http.Client {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct{}{})
	fake.recordInvocation("Client", []interface{}{})
	fake.clientMutex.Unlock()
	if fake.ClientStub != nil {
		return fake.ClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.clientReturns.result1
}

func (fake *FakeAuthenticationStrategy) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeAuthenticationStrategy) ClientReturns(result1 *http.Client) {
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 *http.Client
	}{result1}
}

func (fake *FakeAuthenticationStrategy) ClientReturnsOnCall(i int, result1 *http.Client) {
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 *http.Client
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 *http.Client
	}{result1}
}

func (fake *FakeAuthenticationStrategy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authenticateMutex.RLock()
	defer fake.authenticateMutex.RUnlock()
	fake.tokenMutex.RLock()
	defer fake.tokenMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthenticationStrategy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.AuthenticationStrategy = new(FakeAuthenticationStrategy)
